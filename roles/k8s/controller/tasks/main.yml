- name: Debian Based OS - Install Kubernetes Components
  block: 
  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present
  
  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list
  
  - name: Install Kubelet
    apt:
      name: "kubelet={{k8s_version}}-00"
      state: present
      update_cache: true
    register: apt_result
    until: apt_result is success
    retries: 10
    delay: 15
  
  - name: Install Kubeadm
    apt:
      name: "kubeadm={{k8s_version}}-00"
      state: present
      update_cache: true
    register: apt_result
    until: apt_result is success
    retries: 10
    delay: 15
  
  - name: Install Kubectl
    apt:
      name: "kubectl={{k8s_version}}-00"
      state: present
      update_cache: true
      allow_downgrade: yes
    register: apt_result
    until: apt_result is success
    retries: 10
    delay: 15
  when: ansible_os_family == "Debian"

- name: RedHat Based OS - Install Kubernetes Components
  block:
  - name: Add Kubernetes repository
    ansible.builtin.yum_repository:
      name: kubernetes
      description: Kubernnetes
      baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
      enabled: true
      gpgcheck: true
      gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg 
      exclude: kubelet kubeadm kubectl

  - name: Install Kubelet
    yum:
      name: "kubelet-{{k8s_version}}"
      state: present
      update_cache: true
      disable_excludes: kubernetes
    register: yum_result
    until: yum_result is success
    retries: 10
    delay: 15
  
  - name: Install Kubeadm
    yum:
      name: "kubeadm-{{k8s_version}}"
      state: present
      update_cache: true
      disable_excludes: kubernetes
    register: yum_result
    until: yum_result is success
    retries: 10
    delay: 15
  
  - name: Install Kubectl
    yum:
      name: "kubectl-{{k8s_version}}"
      state: present
      update_cache: true
      allow_downgrade: yes
      disable_excludes: kubernetes
    register: apt_result
    until: apt_result is success
    retries: 10
    delay: 15
  when: ansible_os_family == "RedHat"

- name: Start Kubelet
  service:
    name: kubelet
    enabled: true
    state: started

- name: Check Cluster Status
  kubernetes.core.k8s_info:
    kubeconfig: "/home/{{ ansible_user }}/.kube/config" 
    kind: node
  register: controller_status
  failed_when: false
  ignore_errors: true
  
# Initialize the First Controller 
- name: Initialize the First Controller
  block: 
  - name: Check if kubeadm directory exists.
    stat:
      path: /etc/kubernetes/kubeadm
    register: kdm_folder
  
  - name: "Create kubeadm directory if not exists"
    file:
      path: /etc/kubernetes/kubeadm/
      state: directory
      mode: 0755
    when: kdm_folder.stat.exists == false
  
  - name: Set up the kubeadm config file.
    template:
      src: "templates/{{ item.template }}"
      dest: "{{ item.dest }}"
      mode: 0644
    with_items:
      - { template: kubeadm-config.j2, dest: /etc/kubernetes/kubeadm/kubeadm-config.yml }
  
  - name: Initialize the Kubernetes cluster using kubeadm
    shell: sudo kubeadm init --config=/etc/kubernetes/kubeadm/kubeadm-config.yml --upload-certs
#    shell: sudo kubeadm init --config=/etc/kubernetes/kubeadm/kubeadm-config.yml --skip-phases=addon/kube-proxy --skip-phases=addon/coredns --upload-certs

  - name: create .kube directory
    ansible.builtin.file:
      path: "/home/{{ ansible_user }}/.kube"
      state: directory
      mode: 0755
  
  - name: copy admin.conf to user's kube config
    ansible.builtin.copy:
      src: /etc/kubernetes/admin.conf
      dest: "/home/{{ ansible_user }}/.kube/config"
      remote_src: yes
      owner: "{{ ansible_user }}"
      mode: 0644
  
  - name: Copy kube config file to bastion host
    ansible.builtin.fetch:
      src: /home/{{ ansible_user }}/.kube/config
      dest: ~/.kube/config
      flat: yes

#  - name: Pause for 45 seconds for controller to normalize
#    ansible.builtin.pause:
#      seconds: 45

#  - name: Kubernetes Kubeadm addons
#    shell: sudo kubeadm init phase addon all --control-plane-endpoint="192.168.1.41:6443" --pod-network-cidr=10.244.0.0/16
    

  when: 
    - (controller_status.api_found is undefined ) 
    - ansible_host == hostvars[groups['controller'][0]]['ansible_host'] | default(groups['controller'][0])

# Generate Join Command  
- name: Generate Join Command
  block: 

  - name: get new certificate-key
    shell: kubeadm certs certificate-key
    register: certificate_key_raw
  
  - name: Initialize the Kubernetes phase upload-certs using kubeadm
    shell: "sudo kubeadm init phase upload-certs --upload-certs --certificate-key {{ certificate_key_raw.stdout_lines[0] }} "
  
  - name: get join command
    shell: kubeadm token create --print-join-command
    register: join_command_raw
  
  - name: set join commands
    set_fact:
      join_worker_command: "{{ join_command_raw.stdout_lines[0] }}"
      join_controller_command: "{{ join_command_raw.stdout_lines[0] }}  --control-plane --certificate-key {{ certificate_key_raw.stdout_lines[0] }} "
  
  when: ansible_host == hostvars[groups['controller'][0]]['ansible_host'] | default(groups['controller'][0])

# Join remaining contorller nodes 
- name: Join Other Controllers
  block: 
  - name: join cluster as controller
    shell: "sudo {{ hostvars[groups['controller'][0]].join_controller_command }}"

  - name: create .kube directory
    ansible.builtin.file:
      path: "/home/{{ ansible_user }}/.kube"
      state: directory
      mode: 0755
  
  - name: copy admin.conf to user's kube config
    ansible.builtin.copy:
      src: /etc/kubernetes/admin.conf
      dest: "/home/{{ ansible_user }}/.kube/config"
      remote_src: yes
      owner: "{{ ansible_user }}"
      mode: 0644

  when: 
    - (controller_status.api_found is undefined ) 
    - not ansible_host == hostvars[groups['controller'][0]]['ansible_host'] | default(groups['controller'][0])

- name: Gather worker nodes
  kubernetes.core.k8s_info:
    kubeconfig: "/home/{{ ansible_user }}/.kube/config" 
    kind: node
    label_selectors: "!node-role.kubernetes.io/control-plane"
  register: worker_nodes
